{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.26b4d7a177e422d17e96.hot-update.js","sources":["webpack:///./components/CommentSection.js"],"sourcesContent":["import { useCommentIds, useComments } from \"../hooks/comments\";\r\nimport { Comment } from \"./Comment\";\r\n\r\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\r\n\r\nimport s from \"../style/commentSection.module.sass\";\r\nimport { useLayoutEffect, useState } from \"react\";\r\nimport { PostForm } from \"./PostForm\";\r\n\r\nexport function CommentSection(props) {\r\n    //load comments\r\n    var [comIds, setIds] = useCommentIds(props.open, props.id);\r\n    var [comments, setComments] = useComments(comIds);\r\n    var [height, setHeight] = useState(null);\r\n\r\n    //required by css switch transition\r\n    var animKey = undefined;\r\n\r\n    var comObjects = comments.map((comment, idx) => {\r\n        //comments not yet loaded\r\n        if(comment === \"not epic\") {\r\n            animKey=\"wait\";\r\n            return <p key={0}>Loading...</p>;\r\n        } \r\n        //COMMENTS!\r\n        animKey=\"cs\";\r\n        return (\r\n        <Comment key={comment.entityId} comment={comment} \r\n        onEdit={(c) => {\r\n            setComments((cs) => {\r\n                let newC = [...cs];\r\n                newC[idx] = c;\r\n                return newC;\r\n            });\r\n        }}\r\n        onReply={(c) => {\r\n            setComments((cs) => {\r\n                let newC = [...cs];\r\n                var nnewC = newC.slice(0, idx+1).concat(c, newC.slice(idx+1))\r\n                return newC;\r\n            });\r\n        }}\r\n        onComStateChange = {(comState) => {\r\n            setComments((cs) => {\r\n                let newC = [...cs];\r\n                return newC.map((val) => {\r\n                    if(val.lft>comment.lft && val.rgt<comment.rgt) {\r\n                        let newCC = {...val};\r\n                        if(comState === \"hidden\") {\r\n                            if (!newCC.hidden_lvl.includes(comment.level)) newCC.hidden_lvl.push(comment.level);\r\n                        } else if(comState === \"locked\") {\r\n                            newCC.hidden_lvl = newCC.hidden_lvl.filter((e) => e!=comment.level);\r\n                            if (!newCC.locked_lvl.includes(comment.level)) newCC.locked_lvl.push(comment.level);\r\n                        } else {\r\n                            newCC.hidden_lvl = newCC.hidden_lvl.filter((e) => e!=comment.level);\r\n                            newCC.locked_lvl = newCC.locked_lvl.filter((e) => e!=comment.level);\r\n                        }\r\n                        return newCC\r\n                    } else {\r\n                        return val;\r\n                    }\r\n                })\r\n            })\r\n        }}/>)\r\n    });\r\n    //no comments :(\r\n    if (!comments[0]) {\r\n        animKey = \"no\";\r\n        comObjects = [<p key={0}>There are no Comments</p>];\r\n    }\r\n    if(!props.open) {\r\n        animKey=\"hurensohn nein\";\r\n        comObjects = [<></>];\r\n    }\r\n\r\n    function calculateHeight (el, appear) {\r\n        if(!el.firstChild)\r\n            return;\r\n\r\n        var h = el.firstChild.offsetHeight;\r\n        console.log(el.firstChild);\r\n        console.log(h);\r\n\r\n        setHeight(h);\r\n    }\r\n\r\n    //heightChange={(diff) => setHeight((h)=>h+diff)}\r\n    return (\r\n        \r\n            <SwitchTransition mode={\"out-in\"} key=\"l\">\r\n                <CSSTransition \r\n                    timeout={300} \r\n                    classNames={{ ...s }} \r\n                    component=\"div\"\r\n                    onEnter={calculateHeight}\r\n                    onExit={calculateHeight}\r\n                    key={animKey}\r\n                    style={{\"--height\": height+\"px\"}}\r\n                >     \r\n                    {props.open? \r\n                        <div className={s.commentSectionWrap}>\r\n                            \r\n                            <div className={s.commentSection}>\r\n                                <PostForm comment={props.id} rerender={(id) => {\r\n                                    console.log(\"YOO \"+id);\r\n                                    if(id) setIds((ids) => {\r\n                                        let ids2=[id, ...ids];\r\n                                        return ids2;\r\n                                    })\r\n                                }} locked={props.entity.comments_locked}></PostForm>\r\n                                {comObjects}\r\n                            </div> \r\n                        </div>\r\n                    : <div></div>}\r\n                </CSSTransition>\r\n            </SwitchTransition>\r\n\r\n    );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;A","sourceRoot":""}