{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.bdb92d1151163627eaf6.hot-update.js","sources":["webpack:///./components/Comment.js"],"sourcesContent":["import { Vote } from \"./Vote\";\r\nimport { Timestamp } from \"./Timestamp\"\r\n\r\nimport s from \"../style/post.module.sass\";\r\nimport { useContext, useState } from \"react\";\r\nimport { ConfirmMenuItem } from \"./ConfirmMenuItem\";\r\nimport { FaBan, FaCommentDots, FaCopy, FaEye, FaEyeSlash, FaLock, FaLockOpen, FaReply } from \"react-icons/fa\";\r\nimport { MenuData } from \"./layout/ContextMenu\";\r\nimport { useIdentity } from \"../hooks/identity\";\r\nimport {useEntity} from \"../hooks/entity\";\r\nimport { MdEdit } from \"react-icons/md\";\r\nimport { DropdownItem } from \"./MultilevelMenu\";\r\nimport { PostForm } from \"./PostForm\";\r\n\r\nexport function Comment(props) {\r\n    var c = props.comment;\r\n    var [editing, setEditing] = useState(false);\r\n    var [replying, setReplying] = useState(false);\r\n    var [deletion, setDeletion] = useState(false);\r\n\r\n    var contextMenu = useContext(MenuData);\r\n    var [id, axios] = useIdentity();\r\n    var [comState, entity] = useEntity(c.entity);\r\n\r\n    var indents = [];\r\n    for(let i=0; i<c.level; i++) {\r\n        indents.push(<Threadindent key={i}\r\n            data-state={(c.hidden_lvl && c.hidden_lvl.includes(i))? \"hidden\" : (c.locked_lvl && c.locked_lvl.includes(i)) ? \"locked\" : undefined  }/>)\r\n    }\r\n\r\n    console.log(c);\r\n\r\n    function context(evt) {\r\n        if (deletion || editing) return false\r\n        evt.preventDefault();\r\n\r\n        var menu = [\r\n            <ConfirmMenuItem text=\"Copy markdown\" leftIcon={<FaCopy/>} onClick={async () => {\r\n                try {\r\n                    await navigator.clipboard.writeText(c.text)\r\n                    return true;\r\n                } catch (error) {\r\n                    return false;\r\n                }\r\n            }} />\r\n        ]\r\n        if (typeof id.active !== \"number\" || !id.users[id.active])\r\n            return contextMenu.openMenu(evt.pageX, evt.pageY, menu);\r\n        \r\n        if( c.locked_lvl.length === 0 ) \r\n            menu = [<DropdownItem text=\"Reply\" onClick={reply} leftIcon={<FaReply />} />].concat(menu);\r\n\r\n        if (c.author && id.users[id.active].username === c.author.username && props.onEdit)\r\n            menu.push(\r\n                <DropdownItem text=\"Edit\" onClick={edit} leftIcon={<MdEdit />} />);\r\n        /*if ((c.author && id.users[id.active].username === c.author.username) || id.users[id.active].moderator)\r\n            menu.push(<DropdownItem text=\"Delete\" onClick={deleteModal} warn={true} leftIcon={<FaBan />} />); */\r\n        if (id.users[id.active].moderator) {\r\n            var l = comState===\"locked\" || comState===\"hidden\";\r\n            var h =  comState===\"hidden\";\r\n            menu.push(\r\n                <DropdownItem text=\"Comments\" warn={true} leftIcon={<FaCommentDots />}>\r\n                    <DropdownItem text={!l ? \"Lock\" : \"Unlock\"} leftIcon={!l ? <FaLock /> : <FaLockOpen />} warn={true} onClick={\r\n                        async () => {let state = await entity(!l); contextMenu.removeMenu(); if(props.onComStateChange) props.onComStateChange(state);\r\n                    }} />\r\n                    <DropdownItem text={!h ? \"Hide\" : \"Show\"} leftIcon={!h ? <FaEyeSlash /> : <FaEye />} warn={true} onClick={\r\n                        async() => {let state = await entity(undefined, !h); contextMenu.removeMenu(); if(props.onComStateChange) props.onComStateChange(state);\r\n                    }} />\r\n                </DropdownItem>\r\n            )\r\n        }\r\n\r\n        contextMenu.openMenu(evt.pageX, evt.pageY, menu);\r\n    }\r\n\r\n    function edit () {\r\n        setEditing(true);\r\n        contextMenu.removeMenu();\r\n    }\r\n    function reply () {\r\n        setReplying(true);\r\n        contextMenu.removeMenu();\r\n    }\r\n\r\n    let hideIndicator = (\r\n        <div\r\n            className={s.comStateInd}\r\n            data-state={comState}\r\n            style={{display:\"inline-block\", marginLeft: \"1em\"}}\r\n        >\r\n            {comState===\"hidden\"? \r\n            <> Hidden <FaEyeSlash/></>:\r\n             (comState===\"locked\"? \r\n             <> Locked <FaLock/></>:\r\n             undefined)\r\n            }\r\n        </div>\r\n    )\r\n\r\n    if(editing) {\r\n        return (\r\n            <div className={s.commentWrap}>\r\n                <div className={s.indents}>{indents}</div>\r\n                <div className={s.comment}>\r\n                    <PostForm comment={c.entity.id} cta=\"Edit!\" edit text={c.text} onEdit={async (text, cancel) => {\r\n                        if (cancel) return setEditing(false);\r\n\r\n                        try {\r\n                            var res = await axios.put(`/comment/${c.entity.id}`, { text });\r\n                        } catch (error) {\r\n                            console.error(error);\r\n                            return false\r\n                        }\r\n                        console.log(res);\r\n                        props.onEdit({...c, text});\r\n                        setEditing(false);\r\n                        return true;\r\n                    }}></PostForm>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if(!c.author && c.text === \"~d~\" || c.text === \"~r~\") {\r\n        return (\r\n            <div className={s.commentWrap}>\r\n                <div className={s.indents}>{indents}</div>\r\n                <div className={s.comment}>\r\n                    <div className={s.indentVote}>\r\n                        <Threadindent data-state={comState}></Threadindent>\r\n                    </div>\r\n                    <div className={s.content}>\r\n                        <div>\r\n                            <p className={s.author}>\r\n                                <Timestamp time={c.createdAt} edit={c.updatedAt} compact={true}></Timestamp> {hideIndicator}\r\n                            </p>\r\n                        </div>\r\n                        <div className={s.body}>\r\n                            <p style={{color:\"grey\"}}>\r\n                                COMMENT { c.text===\"~d~\" ? \"‚ùåDELETED‚ùå\" : \"üî•REMOVEDüî•\"}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={s.commentWrap} onContextMenu={context}>\r\n            <div className={s.indents}>{indents}</div>\r\n            <div className={s.comment}>\r\n                <div className={s.indentVote}>\r\n                    <Vote up={c.entity.upvotes} down={c.entity.downvotes} small={true} id={c.entity.id}></Vote>\r\n                    <Threadindent data-state={comState}></Threadindent>\r\n                </div>\r\n                <div className={s.content}>\r\n                    <div>\r\n                        <p className={s.author}>\r\n                            posted by <span>{c.author ? c.author.username : \"‚ùåDELETED‚ùå\"}</span> <Timestamp time={c.createdAt} edit={c.updatedAt} compact={true}></Timestamp> {hideIndicator}\r\n                        </p>\r\n                    </div>\r\n                    <div className={s.body}>\r\n                        <p>\r\n                            {c.text}\r\n                        </p>\r\n                        {replying && (\r\n                            <PostForm comment={c.entity.id} cta=\"Reply!\" edit onEdit={async (text, cancel) => {\r\n                                if (cancel) return setReplying(false);\r\n                                try {\r\n                                    var res = await axios.post(`/comment/${c.entity.id}`, { text });\r\n                                } catch (error) {\r\n                                    console.error(error);\r\n                                    return false\r\n                                }\r\n                                props.onReply({...c, text});\r\n                                setEditing(false);\r\n                                return true;\r\n                            }}></PostForm>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function Threadindent(props) {\r\n    return (\r\n        <div className={s.threadindent} {...props}></div>\r\n    );\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AAIA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AANA;AACA;AADA;AASA;AACA;AAAA;AAAA;AACA;AAXA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAikBA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}