{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.43a9e13c9c76c4f788b5.hot-update.js","sources":["webpack:///./components/PostForm.js"],"sourcesContent":["import { useIdentity } from \"../hooks/identity\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport s from \"../style/postForm.module.sass\"\r\n\r\nimport markdown from \"../helpers/markdown\";\r\nconst md = markdown({ anchor: false, embeds: true, supressHeadings: true });\r\n\r\nconst MAX_TITLE_LEN = 100;\r\n\r\nexport function PostForm (props) {\r\n    var [id, axios] = useIdentity();\r\n    var activeUser = id.users[id.active];\r\n\r\n    var [title, setTitle] = useState(props.title ||\"\");\r\n    var [text, setText] = useState(props.text || \"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [failed, setFailed] = useState(false);\r\n    const [textareaHeight, setTextAreaHeight] = useState(props.comment?\"4em\":\"8em\");\r\n\r\n    var textareaRef = useRef();\r\n\r\n    console.log(loading);\r\n    useEffect(() => {\r\n        if(textareaRef && textareaRef.current) setTextAreaHeight((height) => {\r\n            \r\n           /* if(props.heightChange) {\r\n                props.heightChange(textareaRef.current.scrollHeight-(typeof height === \"number\" ? height : 100))\r\n            }*/\r\n            return textareaRef.current.scrollHeight;\r\n        })\r\n    }, [textareaRef]);\r\n\r\n    function change(evt) {\r\n        switch(evt.target.name) {\r\n            case \"title\":\r\n                return setTitle(evt.target.value);\r\n            case \"text\":\r\n                setTextAreaHeight(textareaRef.current.scrollHeight)\r\n                return setText(evt.target.value);\r\n        }\r\n    }\r\n\r\n    async function submit(evt) {\r\n        evt.preventDefault();\r\n        setLoading(true);\r\n        await later(1000);\r\n        console.log(\"Title:\", title);\r\n        console.log(\"Text:\", text);\r\n\r\n        if(!activeUser) {\r\n            setLoading(false);\r\n            return id.toggleModal();\r\n        }\r\n        \r\n        if(props.edit) {\r\n            var res = await props.onEdit(text);\r\n            if(!res) setFailed(true);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        //Submit Form\r\n        if((title.length>=1 && title.length<=MAX_TITLE_LEN )|| props.comment) {\r\n            axios.post(!props.comment ? `/post/` : `/comment/${props.comment}`, {\r\n                title, \r\n                text\r\n            })\r\n            .then(function (response) {\r\n                if(props.close) props.close()\r\n                //show post \r\n                if(props.rerender) props.rerender(response.data.entityId || response.data.id)\r\n                setLoading(false);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                //console.log(error.response.data);\r\n                if(props.rerender) props.rerender()\r\n                setLoading(false);\r\n            });\r\n        } else {\r\n            \r\n            setLoading(false);\r\n            if(props.rerender) props.rerender()\r\n            //props.close()\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={submit} className={s.postForm}>\r\n                {!props.comment &&\r\n                <div className={s.titleCounter} data-invalid={title.length<1 || title.length>MAX_TITLE_LEN}> \r\n                    <input \r\n                        type=\"text\" \r\n                        className={s.title}\r\n                        value={title}\r\n                        onChange={change}\r\n                        name=\"title\" \r\n                        placeholder=\"The post's title\" \r\n                        autoComplete=\"off\"\r\n                        disabled={loading || props.edit || props.locked}\r\n                    />\r\n                    <p>{title.length}/{MAX_TITLE_LEN}</p>\r\n                </div>}\r\n                \r\n                <textarea \r\n                    name=\"text\" \r\n                    value={text}\r\n                    onChange={change}\r\n                    placeholder={props.locked?\"LOCKED, bitch\":\"Go ahead, unleash your creative Genius!\" }\r\n                    rows={props.comment?\"2\":\"4\"} \r\n                    autoComplete=\"off\"\r\n                    disabled={loading  || props.locked}\r\n                    ref={textareaRef}\r\n                    style={{height: textareaHeight+3+\"px\"}}\r\n                ></textarea>\r\n            \r\n                <div className={`${s.postButton} ${props.locked && s.dull}`}><button \r\n                    type=\"submit\" \r\n                    value=\"Post!\"\r\n                    data-known={!Boolean(activeUser)} \r\n                    disabled={loading  || props.locked}\r\n                >{props.locked?\"HAHA NO\":\"Post!\"}</button></div>\r\n                {props.edit && <button className={s.cancelButton}\r\n                    value=\"Cancel\"\r\n                    disabled={loading}\r\n                    onClick= {()=> {props.onEdit(null, true)}}\r\n                >Cancel</button>}\r\n                <div className={s.author}> \r\n                    as\r\n                    <span data-known={Boolean(activeUser)} >\r\n                        {activeUser ? activeUser.username : \"<UNKNOWN>\"}\r\n                    </span>\r\n                    {failed && <i style={{color: \"red\", marginLeft:\"2em\"}}>(an error occured)</i>}\r\n                </div>\r\n            \r\n                \r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction later(delay) {\r\n    return new Promise(function(resolve) {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAfA;AACA;AADA;AAmsourceRoot":""}